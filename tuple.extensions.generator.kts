// most of the code borrowed from https://github.com/arrow-kt/arrow/blob/master/generator-scripts/tuple.generator.kts


import java.io.File

val notice = """/*
  AUTOGENERATED FILE. DON'T EDIT DIRECTLY

  This file was generated by tuple.extensions.generator.kts
*/

"""
val package_ = "com.nekomatic.katarynka.arrow"
val maxTuple = 21

val availableLetters = ('a'..'z').toList().map { it.toString() }

val fileContent = StringBuilder()

val imports = """
import arrow.core.Tuple2
import arrow.syntax.collections.plus
""".trimIndent()

fileContent.append(notice)
fileContent.append("package $package_")
fileContent.append("\n\n")
fileContent.append(imports)
fileContent.append("\n\n")

fileContent.append("fun <A, B, C> Tuple2<Tuple2<A, B>, C>.flatten() = this.a + this.b")
fileContent.append("\n")

for (i in 3..maxTuple) {

    val letters = availableLetters.take(i + 1)

    val diamond1 = "<${letters.joinToString { it.toUpperCase() }}>"

    val source = letters.drop(2).asSequence().fold("Tuple2<A, B>") { acc, n -> "Tuple2<${acc}, ${n.toUpperCase()}>" }
    fileContent.append("fun $diamond1 $source.flatten() = this.a.flatten() + this.b")
    fileContent.append("\n")
}

val fileLocation = "./src/main/kotlin/com/nekomatic/katarynka/arrow/tupleExtensions.kt"

File(fileLocation).writeText(fileContent.toString())
